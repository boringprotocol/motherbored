generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Peer {
  id                String  @id @default(cuid())
  name              String?
  setupkey          String?
  target            String?
  kind              String?
  provider_platform String?
  consumer_platform String?
  User              User?   @relation(fields: [userId], references: [id])
  userId            String?
  pubkey            String?
  label             String?
  provider_kind     String?
  wifi_preference   String?
  hw_mode           String?
  channel           Int?
  ssid              String?
  country_code      String?
  wpa_passphrase    String?

  @@index([userId])
}

model FalconToken {
  id         String   @id @default(cuid())
  token      String   @db.VarChar(4096)
  expires_at DateTime
}

model User {
  id             String           @id @default(cuid())
  wallet         String           @unique
  polygon_wallet String?
  ln_address     String?
  name           String?
  bio            String?
  image          String?
  publicProfile  Boolean          @default(false)
  peers          Peer[]
  accountHistory AccountHistory[]
  Claim          Claim[]
}

model Claim {
  id               String    @id @default(cuid())
  token            String?
  tokenMintAddress String?
  amount           Float
  claimed          Boolean   @default(false)
  pending          Boolean   @default(false)
  signature        String?
  wallet           String
  label            String?
  description      String?
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@index([userId])
}

model AccountHistory {
  id               String   @id @default(cuid())
  account          User     @relation(fields: [accountId], references: [id])
  accountId        String
  timestamp        DateTime
  snapshot         String?
  wallet           String?
  consumer_local   Float?
  consumer_linux   Float?
  consumer_windows Float?
  consumer_mac     Float?
  provider_cloud   Float?
  provider_local   Float?
  v1_license       Float?
  v2_license       Float?
  vx_license       Float?
  soft_stake       Float?
  poa              Float?

  @@index([accountId])
}

model AccountRecordsAverages {
  id               Int      @id @default(autoincrement())
  wallet           String
  consumer_local   Float
  consumer_linux   Float
  consumer_windows Float
  consumer_mac     Float
  provider_cloud   Float
  provider_local   Float
  v1_license       Float
  v2_license       Float
  vx_license       Float
  soft_stake       Float
  poa              Float
  timestamp        DateTime @default(now())
}
